<?xml version="1.0"?>
<launch>
  #############################################################################
  #                                                                           #
  #  test_devices.launch                                                      #
  #                                                                           #
  #  This launch file is to test the following on a local machine:            #
  #  - emlid_gps wtih rtk via str2str -in ntrip client -out serial            #
  #  - phidgets imu node                                                      #
  #  - roboclaw motor control node                                            #
  #  - jrk steering control node                                              #
  #  - teleop joy stick node                                                  #
  #  - ackerman to twist message node                                         #
  #  - ekf_locaization_node (global and local)                                #
  #  - navsat_transform_node (modifies gps data)                              #
  #  - initialize_origin (works with mapvviz to load maptile w/o gps data     #
  #  - baselink_to_robot_base static transform (typical tf stuff)             #
  #                                                                           #
  ############################################################################# 
    
  ### RVIZ
  <include file="$(find agbot_0)/launch/include/rviz.launch">
    <arg name="model" default="$(find agbot_0)/urdf/master_sim.xacro" />
    <arg name="rvizconfig" default="$(find agbot_0)/config/simulation_test.rviz" />
  </include> 

   ###  TF tree vizualization
  <node name="rqt_tf_tree" pkg="rqt_tf_tree" type="rqt_tf_tree" /> 

  ### Node vizualization
  <node name="rqt_graph" pkg="rqt_graph" type="rqt_graph" /> 

  ### Roboclaw
  <include file="$(find agbot_0)/launch/include/roboclaw.launch">
    <arg name="dev" default="/dev/roboclaw"/>
    <arg name="baud" default="115200"/>
    <arg name="address" default="128"/>
    <arg name="max_speed" default="0.5"/>
    <arg name="ticks_per_meter" default="43339.4366031"/>
    <arg name="base_width" default="0.41"/> <!-- 1.17 meters long 0.41 meters wide -->
    <arg name="run_diag" default="true"/>
    <arg name="child_frame" default="robot_base" />
    <arg name="publish_tf" default="false" /> 
    <arg name="twist_topic_name" default="/roboclaw/cmd_vel"/>
    <arg name="single_motor" default="false"/>
    <arg name="odom_topic_name" default="/wheel_encoder/odom"/>
  </include>

    ### Steering Linear Actuatory
  <include file="$(find agbot_0)/launch/include/jrk.launch" >
    <arg name="baud"                 default="9600"/>
    <arg name="scale"                default="2500"/>
    <arg name="offset"               default="2048"/>
    <arg name="ackermann_topic_name" default="ackermann"/>
  </include>

  ### USB/Bluetooth Joystick (connected to local PC)
  <include file="$(find agbot_0)/launch/include/teleop.launch" >
    <arg name="joy_dev"             default="/dev/input/js0" />
    <arg name="ackermann_command"   default="/ackermann"/>
    <arg name="twist_command"       default="/roboclaw/cmd_vel"/>
    <arg name="max_forward_vel"     default="2.0"/> # in m/s
    <arg name="max_reverse_vel"     default="2.0"/> # in m/s
    <arg name="max_steering_angle"  default="0.7853982"/> # in radians (45 deg)
    <arg name="joy_msgs"            default="/joy"/>
    <arg name="wheel_base"          default="1.18"/> # distance between front and back tires in meters
  </include>

  <!-- XXX if you cant get tile_map to work try buidling from source this will solve any hidden dependency issues XXX-->
  <!-- https://github.com/swri-robotics/mapviz -->.
  
  <!--https://github.com/danielsnider/MapViz-Tile-Map-Google-Maps-Satellite -->
  ### sudo docker run -p 8080:8080 -d -t -v ~/mapproxy:/mapproxy danielsnider/mapproxy
  ### Then put this URL into the MapViz option "Custom WMTS Source..." http://localhost:8080/wmts/gm_layer/gm_grid/{level}/{x}/{y}.png

  ### for origin initialization "auto"(will use gps data) "stutz"(if indoors)
  ### "auto" will not work without a gps sensor
  <arg name="xy_origin_initilization" default="stutz"/> <!-- "auto"(will use gps) "stutz"(if indoors)  -->

  ### wgs84 to map transfrom node 
  ### (this is needed initialize map frame with wgs84 frame used by mapviz)
  <node pkg="swri_transform_util" type="initialize_origin.py" name="initialize_origin" >
    <param name="local_xy_frame" value="map"/>
    <param name="local_xy_origin" value="$(arg xy_origin_initilization)"/> "auto" setting will set the origin to the first gps fix that it recieves 
    ### if using auto consider the following:
    ### GPSFix message type subscribes to message topic 'gps' 
    ### NavSatFix message type subscribes to message topic 'fix'
    <remap from="fix" to="/gps/fix"/> 
    <rosparam param="local_xy_origins">
      [{ name: stutz,
         latitude: 39.78020,
         longitude: -86.16289,
         altitude: 33.719,
         heading: 0.0},
         
       { name: beck_ag_center,
         latitude: 40.4692641,
         longitude: -86.9929879,
         altitude: 200.0,
         heading: 0.0}]
    </rosparam>
  </node> 

  ### Emlid Reach Node (GPS building nmea_navsat_driver from source)
  <!-- See catkin_ws/src/agbot_0/ -->
  <include file="$(find agbot_0)/launch/include/emlid_gps.launch" >
    <arg name="port" default="/dev/ttyACM0"/> ### Depends on the machine usb port WARNING this can change
    <arg name="baud" default="9600"/>
    <!-- see xarco file for frame id -->
    <arg name="frame_id" default="gps" /> 
    <arg name="gps_topic_name" default="/gps/fix"/>
    <arg name="node_name" default="reach_gps"/>
  </include>

    ### Phidget IMU
  <include file="$(find agbot_0)/launch/include/phidget_imu.launch">
    <arg name="imu_topic_name"  default="imu/data_fixed"/>
    <arg name="period"          default="4"/>
    <arg name="serial_number"   default="-1"/>
    <arg name="world_frame"     default="enu"/>
    <arg name="use_mag"         default="true"/>
    <arg name="use_magnetic_field_msg" default="true"/>
    <arg name="fixed_frame"     default="odom"/>
    <arg name="reverse_tf"      default="false"/>
    <arg name="publish_tf"      default="false"/>
  </include> 

  ### map to odom to robot_base to sensor (where map to odom is done by ekf global with gps)   
  <!-- do not use .xacro sensors -->
  <!-- <node pkg="tf2_ros" type  ="static_transform_publisher" name="base_to_gps_tf" args="-0.050 -0.076 0.750 0 0 0 robot_base sensor" /> -->
  <node pkg="tf2_ros" type  ="static_transform_publisher" name="robotbase_to_imu_tf" args="0 0 0 0 0 0 robot_base imu" />
  <node pkg="tf2_ros" type  ="static_transform_publisher" name="robotbase_to_gps_tf" args="0 0 0 0 0 0 robot_base gps" />
  <node pkg="tf2_ros" type  ="static_transform_publisher" name="base_to_robot_base_tf" args="0 0 0 0 0 0 base_link robot_base" />

  ### NAVSAT Transform Node
  <node pkg="robot_localization" type="navsat_transform_node"
      name="navsat_transform_node"  respawn="true" output="screen">
    <!--rosparam command="load" file="$(find robot_localization)/params/navsat_transform_template.yaml" -->

    <!-- http://www.magnetic-declination.com/-->
    <!-- https://www.ngdc.noaa.gov/geomag/calculators/magcalc.shtml-->
    ###This parameter apperars not to affect heading
    <param name="magnetic_declination_radians" value="0.0"/> <!-- Indianapolis -4*49'= -0.0840666923  Toronto -0.18238691 -->

    <param name="zero_altitude" value="true" /> 
    <param name="broadcast_utm_transform" value="true" />
    <param name="publish_filtered_gps" value="true" />

    <!-- wait 5 secs before calculating the transform from GPS coordinates to robot’s world frame. -->
    <!--<param name="delay" value="5"/> -->

    <!-- Makefsure wait_for_datum is false to use sensors for
    robot’s current pose estimate in its world frame,
    an earth-referenced heading,
    and a geographic coordinate -->
    #### The datum (global frame origin) can be specified via the datum parameter
    <!-- <param name="wait_for_datum" value="true"/> -->
    <!-- <rosparam param="datum">[39.78020, -86.16289, 0.0, map, robot_base]</rosparam> -->

    <!-- If IMU reads 0 facing magnetic north -->
    <!-- using  below config so that imu reads 0 when facing east -->
    ###This parameter appears not to affect heading
    <param name="yaw_offset" value="0.0"/>

    <param name="broadcast_utm_transform" value="true" />
    <!-- OUTPUT TOPICS -->
    <!-- <remap from="/odometry/gps" to="/odometry/filtered_gps"/> -->
    <!-- <remap from="/gps/filtered" to="/gps/filtered"/> -->
    <!-- INPUT TOPICS -->
    <!-- <remap from="/gps/fix" to="/gps/fix"/> -->
    <!-- <remap from="imu/data/" to="/imu/data_fixed"/> -->
    <!-- #remap from="/odometry/filtered" to="/odometry/filtered_global"/> -->
  </node>


  <!-- GLOBAL_EKF_LOCALIZATION -->
  ### Global ekf should perfrom the map to odom transform using GPS+IMU fused sensor data
  ### The map frame is a good long term reference but suffers from discreet jumps
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization_global" output="screen" >
    <param name="frequency" value="3"/>
    <param name="world_frame" value="map"/> ### world_frame must be map for global state estimation 
    <param name="map_frame" value="map"/>
    <param name="odom_frame" value="odom"/>
    <param name="base_link_frame" value="base_link"/>
    <param name="two_d_mode" value="true"/>
    <param name="print_diagnostics" value="true"/>

    <!-- GLOBAL EKF GPS ODOMETRY -->  
    ### must use odom# prefix
    <param name="odom0" value="/gps/fix"/>
    <rosparam param="odom0_config">[true,true,false,
                                   false, false, false,
                                   false, false, false,
                                   false, false, flase,
                                   false, false, false]</rosparam> 

    <!-- GLOBAL EKF IMU ODOMETRY -->  
    ### must use odom# prefix
    <param name="imu0" value="/imu/data_fixed"/>
    <rosparam param="imu0_config">[false,false,false,
                                   true, true, true,
                                   false, false, false,
                                   false, false, flase,
                                   false, false, false]</rosparam>

    <!-- GLOBAL EKF WHEEL ODOMETRY -->
    <param name="odom0" value="/wheel_encoder/odom"/>
    <rosparam param="odom0_config">[false, false, false,
                                    false, false, false,
                                    true,  false, false,
                                    false, false, true,
                                    false, false, false]</rosparam> --> 

  </node>  


  <!-- LOCAL_EKF_LOCALIZATION -->
  ### Local EKF should perfom the odom to base_link transform using continuous sensor data (ie. anything expect GPS or the like)
  ### The odom frame is good for short term reference but suffers from dift over time
  ### At the start odom frame and map frame should be identical 
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization_local" output="screen" >
    <param name="frequency" value="3"/>
    <param name="world_frame" value="odom"/> ### world_frame must be odom for local state estimation
    <param name="map_frame" value="map"/>
    <param name="odom_frame" value="odom"/>
    <param name="base_link_frame" value="base_link"/>
    <param name="two_d_mode" value="true"/>
    <param name="print_diagnostics" value="true"/>

    <!-- Local EKF IMU ODOMETRY -->  
    ### must use odom# prefix
    <param name="imu0" value="/imu/data_fixed"/>
    <rosparam param="imu0_config">[false,false,false,
                                   true, true, true,
                                   false, false, false,
                                   false, false, flase,
                                   false, false, false]</rosparam>

    <!-- Local EKF WHEEL ODOMETRY -->
    <param name="odom0" value="/wheel_encoder/odom"/>
    <rosparam param="odom0_config">[false, false, false,
                                    false, false, false,
                                    true,  false, false,
                                    false, false, true,
                                    false, false, false]</rosparam> -->                            
  </node>


  <!--node pkg="tf2_ros" type="static_transform_publisher" name="swri_transform" args="0 0 0 0 0 0 world map 100" -->


</launch>
